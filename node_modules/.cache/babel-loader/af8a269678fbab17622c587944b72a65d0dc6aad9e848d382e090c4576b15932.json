{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    cart: []\n  },\n  reducers: {\n    addToCart: (state, action) => {\n      const itemInCart = state.cart.find(item => item.id === action.payload.id);\n      if (itemInCart) {\n        itemInCart.quantity++;\n      } else {\n        state.cart.push({\n          ...action.payload,\n          quantity: 1\n        });\n      }\n      localStorage.setItem('cartList', JSON.stringify(state.cart));\n      if (state.cart !== null) {\n        state = JSON.parse(localStorage.getItem('cartList'));\n        console.log(items);\n      }\n    },\n    removeItem: (state, action) => {\n      const removeItem = state.cart.filter(item => item.id !== action.payload);\n      state.cart = removeItem;\n    },\n    incrementQuantity: (state, action) => {\n      let item = state.cart.find(item => item.id === action.payload);\n      item.quantity++;\n    },\n    decrementQuantity: (state, action) => {\n      let item = state.cart.find(item => item.id === action.payload);\n      if (item.quantity === 1) {\n        item.quantity = 1;\n      } else {\n        item.quantity--;\n      }\n    },\n    ProductsInCart: (state, action) => {\n      if (state.cart !== null) {\n        let items = JSON.parse(localStorage.getItem('cartList'));\n        console.log(items);\n      }\n    }\n  }\n});\nexport default cartSlice.reducer;\nexport let {\n  addToCart,\n  removeItem,\n  incrementQuantity,\n  decrementQuantity,\n  ProductsInCart\n} = cartSlice.actions;","map":{"version":3,"names":["createSlice","cartSlice","name","initialState","cart","reducers","addToCart","state","action","itemInCart","find","item","id","payload","quantity","push","localStorage","setItem","JSON","stringify","parse","getItem","console","log","items","removeItem","filter","incrementQuantity","decrementQuantity","ProductsInCart","reducer","actions"],"sources":["D:/route/react projects/ecomerce/src/store/CartSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\"\r\n\r\n\r\n\r\nconst cartSlice = createSlice({\r\n    name:'cart',\r\n    initialState:{cart:[]},\r\n    reducers:{\r\n        addToCart:(state,action)=>{\r\n          const itemInCart =  state.cart.find((item)=>item.id === action.payload.id)\r\n            if(itemInCart){\r\n                itemInCart.quantity++;\r\n            }else{\r\n                state.cart.push({...action.payload, quantity: 1 })\r\n            }\r\n            localStorage.setItem('cartList',JSON.stringify(state.cart));\r\n            if(state.cart !== null){\r\n                state = JSON.parse(localStorage.getItem('cartList'))\r\n                console.log(items);\r\n             }\r\n        },\r\n        removeItem:(state,action)=>{\r\n            const removeItem =   state.cart.filter((item)=>item.id !== action.payload);\r\n            state.cart = removeItem;\r\n        },\r\n        incrementQuantity:(state,action)=>{\r\n           let item = state.cart.find((item)=>item.id === action.payload)\r\n           item.quantity++\r\n        },\r\n        decrementQuantity:(state,action)=>{\r\n            let item = state.cart.find((item)=>item.id === action.payload)\r\n            if(item.quantity ===1){\r\n                item.quantity =1\r\n            }\r\n            else{\r\n                item.quantity--;\r\n            }\r\n        },\r\n        ProductsInCart:(state,action)=>{\r\n            if(state.cart !== null){\r\n                let items = JSON.parse(localStorage.getItem('cartList'))\r\n                console.log(items);\r\n             }\r\n\r\n        }\r\n    }\r\n})\r\n\r\nexport default cartSlice.reducer;\r\nexport let {addToCart,removeItem,incrementQuantity,decrementQuantity,ProductsInCart} = cartSlice.actions;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAI9C,MAAMC,SAAS,GAAGD,WAAW,CAAC;EAC1BE,IAAI,EAAC,MAAM;EACXC,YAAY,EAAC;IAACC,IAAI,EAAC;EAAE,CAAC;EACtBC,QAAQ,EAAC;IACLC,SAAS,EAAC,CAACC,KAAK,EAACC,MAAM,KAAG;MACxB,MAAMC,UAAU,GAAIF,KAAK,CAACH,IAAI,CAACM,IAAI,CAAEC,IAAI,IAAGA,IAAI,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAACD,EAAE,CAAC;MACxE,IAAGH,UAAU,EAAC;QACVA,UAAU,CAACK,QAAQ,EAAE;MACzB,CAAC,MAAI;QACDP,KAAK,CAACH,IAAI,CAACW,IAAI,CAAC;UAAC,GAAGP,MAAM,CAACK,OAAO;UAAEC,QAAQ,EAAE;QAAE,CAAC,CAAC;MACtD;MACAE,YAAY,CAACC,OAAO,CAAC,UAAU,EAACC,IAAI,CAACC,SAAS,CAACZ,KAAK,CAACH,IAAI,CAAC,CAAC;MAC3D,IAAGG,KAAK,CAACH,IAAI,KAAK,IAAI,EAAC;QACnBG,KAAK,GAAGW,IAAI,CAACE,KAAK,CAACJ,YAAY,CAACK,OAAO,CAAC,UAAU,CAAC,CAAC;QACpDC,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;MACrB;IACL,CAAC;IACDC,UAAU,EAAC,CAAClB,KAAK,EAACC,MAAM,KAAG;MACvB,MAAMiB,UAAU,GAAKlB,KAAK,CAACH,IAAI,CAACsB,MAAM,CAAEf,IAAI,IAAGA,IAAI,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAAC;MAC1EN,KAAK,CAACH,IAAI,GAAGqB,UAAU;IAC3B,CAAC;IACDE,iBAAiB,EAAC,CAACpB,KAAK,EAACC,MAAM,KAAG;MAC/B,IAAIG,IAAI,GAAGJ,KAAK,CAACH,IAAI,CAACM,IAAI,CAAEC,IAAI,IAAGA,IAAI,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAAC;MAC9DF,IAAI,CAACG,QAAQ,EAAE;IAClB,CAAC;IACDc,iBAAiB,EAAC,CAACrB,KAAK,EAACC,MAAM,KAAG;MAC9B,IAAIG,IAAI,GAAGJ,KAAK,CAACH,IAAI,CAACM,IAAI,CAAEC,IAAI,IAAGA,IAAI,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAAC;MAC9D,IAAGF,IAAI,CAACG,QAAQ,KAAI,CAAC,EAAC;QAClBH,IAAI,CAACG,QAAQ,GAAE,CAAC;MACpB,CAAC,MACG;QACAH,IAAI,CAACG,QAAQ,EAAE;MACnB;IACJ,CAAC;IACDe,cAAc,EAAC,CAACtB,KAAK,EAACC,MAAM,KAAG;MAC3B,IAAGD,KAAK,CAACH,IAAI,KAAK,IAAI,EAAC;QACnB,IAAIoB,KAAK,GAAGN,IAAI,CAACE,KAAK,CAACJ,YAAY,CAACK,OAAO,CAAC,UAAU,CAAC,CAAC;QACxDC,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;MACrB;IAEL;EACJ;AACJ,CAAC,CAAC;AAEF,eAAevB,SAAS,CAAC6B,OAAO;AAChC,OAAO,IAAI;EAACxB,SAAS;EAACmB,UAAU;EAACE,iBAAiB;EAACC,iBAAiB;EAACC;AAAc,CAAC,GAAG5B,SAAS,CAAC8B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}